/////// backgroundGeolocation

// distance provider event: mv:false,acy:18.084,v:0.0,df:1
// activity provider event: acy:16.846,v:0.0   ,  Detected STILL activity
//syncThreshold: 10, // doesnt work //Specifies how many previously failed locations will be sent to server at once
//maxLocations: 100, //Limit maximum number of locations stored into db

// DISTANCE_FILTER_PROVIDER: 0,
// ACTIVITY_PROVIDER: 1,
// RAW_PROVIDER: 2
// HIGH_ACCURACY: 0,
// MEDIUM_ACCURACY: 100,
// LOW_ACCURACY: 1000,
// PASSIVE_ACCURACY: 10000,

// BackgroundGeolocation.getLocations()
//   .then(locations => {
//     alert('locations: ' + locations.length); // funciona
// });  

// BackgroundGeolocation.deleteAllLocations()
// .then(locations => {
//   alert('apaguei tudo!'); // funciona
// });

// BackgroundGeolocation.getConfig()
//   .then(config => {
//     //alert('config: ' + JSON.stringify(config)); // funciona
//   });

//BackgroundGeolocation.showLocationSettings() // funciona

// BackgroundGeolocation.on(BackgroundGeolocationEvents.foreground)
//   .subscribe(() => {
//     // funciona
//   });

// BackgroundGeolocation.on(BackgroundGeolocationEvents.background)
//   .subscribe(() => {
//     // this.background++ // funciona
//   });

// BackgroundGeolocation.on(BackgroundGeolocationEvents.start)
//   .subscribe(() => {
//     // funciona
//   });

BackgroundGeolocation.on(BackgroundGeolocationEvents.activity) // nunca entrou
  .subscribe(activity => {
    alert('activity: ' + JSON.stringify(activity)); // nunca entrou
  });

BackgroundGeolocation.on(BackgroundGeolocationEvents.authorization) // nunca entrou
  .subscribe(status => {
    alert('BackgroundGeolocation authorization status: ' + status['authorization']);
  });

BackgroundGeolocation.on(BackgroundGeolocationEvents.error)
  .subscribe(error => {
    alert('Erro ao resgatar os dados de localização: ' + error['message']); // nunca entrou
  });     

/////// backgroundMode

this.backgroundMode.on('activate', () => {
  alert('ativado')
  this.localNotifications.emitNotification('background mode', 'activate')
});

this.backgroundMode.on('enable', () => {
  alert('enabled')
  this.localNotifications.emitNotification('background mode', 'enabled')
});

this.backgroundMode.on('failure', () => {
  alert('failure')
  this.localNotifications.emitNotification('background mode', 'failure')
});

this.backgroundMode.enable()

this.localNotifications.emitNotification('isBackgroundModeActive: ', '' + JSON.stringify(this.backgroundMode.isActive()))